

## Installing Django 4.0 requires a min of Python 3.10

  ## installing python 3.10 on Centos requires the following:

    ## follow steps in https://linuxstans.com/how-to-install-python-centos/


    1) sudo dnf upgrade -y

    2) sudo dnf install epel-release -y

    3) sudo dnf upgrade -y

    4) sudo dnf install sqlite -y

    5) sudo dnf install openssl-devel bzip2-devel libffi-devel -y

    6) sudo dnf groupinstall "Development Tools" -y

    7) sudo dnf install wget -y

    8) wget https://www.sqlite.org/2022/sqlite-autoconf-3400100.tar.gz

    9)  tar xvfz sqlite-autoconf-3400100.tar.gz

    10) cd sqlite-autoconf-3400100

    11) ./configure

    12) make

    13) sudo make install


    14) Download python3.10.

    cd ~
    wget https://www.python.org/ftp/python/3.10.9/Python-3.10.9.tar.xz

    15) Extract archive

    tar -xvf Python-3.10.9.tar.xz

    16) cd Python-3.10.9

    17) ./configure --enable-optimizations

    18) make

    19) sudo make install

    20) python3 -V

    21) python3 -m venv .venv

    22) source .venv/bin/activate

    23) python -m pip install django~=4.0.0

    24) Create folder for django project

       mkdir -p ~/django_begin/code/hello_world
       cd ~/django_begin/code/hello_world

    25) django-admin startproject hello_world .

    26) python manage.py runserver 0.0.0.0:8000

        Webpage should be visible

    27) stop and disable firewall service

    sudo systemctl stop firewalld.service
    sudo systemctl disable firewalld.service

    28)  In "settings.py" django_project  set
         ALLOWED_HOSTS = ['*']


    29)  To get rid of the "You have 18 unapplied migration(s)" error

     ^C
     python manage.py migrate
     python manage.py runserver 0.0.0.0:8000


    30) Model-View-Controller vs Model-View-Template

    Over time the Model-View-Controller (MVC) pattern has emerged as a popular way to internally
    separate the data, logic, and display of an application into separate components. This makes it
    easier for a developer to reason about the code. The MVC pattern is widely used among web
    frameworks including Ruby on Rails, Spring (Java), Laravel (PHP), ASP.NET (C#) and many others.

    In the traditional MVC pattern there are three major components:

        • Model: Manages data and core business logic
        • View: Renders data from the model in a particular format
        • Controller: Accepts user input and performs application-specific logic

    Django only loosely follows the traditional MVC approach with its own version often called
    Model-View-Template (MVT). This can be initially confusing to developers with previous web
    framework experience. In reality, Django’s approach is really it is a 4-part pattern that also
    incorporates URL Configuration so something like MVTU would be a more accurate description.

    The Django MVT pattern is as follows:
        • Model: Manages data and core business logic
        • View: Describes which data is sent to the user but not its presentation
        • Template: Presents the data as HTML with optional CSS, JavaScript, and Static Assets
        • URL Configuration: Regular-expression components configured to a View

    This interaction is fundamental to Django yet very confusing to newcomers so let’s map
    out the order of a given HTTP request/response cycle. When you type in a URL, such as
    https://djangoproject.com, the first thing that happens within our Django project is a URL
    pattern (contained in urls.py) is found that matches it. The URL pattern is linked to a single
    view (contained in views.py) which combines the data from the model (stored in models.py) and
    the styling from a template (any file ending in .html). The view then returns a HTTP response to
    the user.

    The complete Django flow looks like this:
    Django request/response cycle

    HTTP Request -> URL -> View -> Model and Template -> HTTP Response




    30) Create An App
    Django uses the concept of projects and apps to keep code clean and readable. A single top-level
    Django project can contain multiple apps. Each app controls an isolated piece of functionality.
    For example, an e-commerce site might have one app for user authentication, another app
    for payments, and a third app to power item listing details. That’s three distinct apps that all
    live within one top-level project. How and when you split functionality into apps is somewhat
    subjective, but in general, each app should have a clear function.

    To add a new app go to the command line and quit the running server with Control+c. Then use
    the startapp command followed by the name of our app which will be pages.

   # to start pages app

   python manage.py startapp pages

    ├── pages
    │   ├── __init__.py
    │   ├── admin.py
    │   ├── apps.py
    │   ├── migrations
    │   │   └── __init__.py
    │   ├── models.py
    │   ├── tests.py
    │   └── views.py

    • admin.py is a configuration file for the built-in Django Admin app
    • apps.py is a configuration file for the app itself
    • migrations/ keeps track of any changes to our models.py file so it stays in sync with our
    database
    • models.py is where we define our database models which Django automatically translates
    into database tables
    • tests.py is for app-specific tests
    • views.py is where we handle the request/response logic for our web app

    Notice that the model, view, and url from the MVT pattern are present from the beginning. The
    only thing missing is a template which we’ll add shortly

    Even though our new app exists within the Django project, Django doesn’t “know” about it until
    we explicitly add it to the django_project/settings.py file. In your text editor open the file up
    and scroll down to INSTALLED_APPS where you’ll see six built-in Django apps already there. Add
    pages.apps.PagesConfig at the bottom.

    # django_project/settings.py
INSTALLED_APPS = [
"django.contrib.admin",
"django.contrib.auth",
"django.contrib.contenttypes",
"django.contrib.sessions",
"django.contrib.messages",
"django.contrib.staticfiles",
"pages.apps.PagesConfig", # new
]